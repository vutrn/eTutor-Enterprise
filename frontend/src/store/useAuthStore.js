// Generated by Copilot
import { create } from "zustand";
import toast from "react-hot-toast";
import axiosInstance from "../libs/axios";
import { persist } from "zustand/middleware";

export const useAuthStore = create(
  persist(
    (set, get) => ({
      authUser: null,
      accessToken: null,
      isSigningUp: false,
      isLoggingIn: false,
      isCheckingAuth: true,

      signup: async (formData) => {
        set({ isSigningUp: true });
        try {
          const res = await axiosInstance.post("v1/auth/register", formData);
          set({ authUser: res.data });
          toast.success("Signup successful");
        } catch (error) {
          console.error("Signup failed:", error.response.data.message);
          toast.error(error.response.data.message);
        } finally {
          set({ isSigningUp: false });
        }
      },

      login: async (formData) => {
        set({ isLoggingIn: true });
        try {
          const res = await axiosInstance.post("/v1/auth/login", formData);
          set({ authUser: res.data , accessToken: res.data.accessToken});
          toast.success("Login successful");
        } catch (error) {
          console.error("Login error:", error.response?.data?.message);
          toast.error(error.response?.data?.message);
        } finally {
          set({ isLoggingIn: false });
        }
      },

      logout: async () => {
        try {
          await axiosInstance.post("v1/auth/logout");
          localStorage.removeItem("authUser");
          set({authUser: null, accessToken: null});
          toast.success("Logged out successfully.");
          window.location.reload();
        } catch (error) {
          console.log(error.response?.data?.message);
        }
      },

      updateProfile: async (formData) => {},

      connectSocket: async () => {},

      disconnectSocket: async () => {},

      setAccessToken: (token) => {
        set({ accessToken: token });
        localStorage.setItem("accessToken", token);
      },
    }),
    {
      name: "auth-storage", // name of the item in the storage (must be unique)
      partialize: (state) => ({ authUser: state.authUser, accessToken: state.accessToken }),
    }
  )
);

axiosInstance.interceptors.request.use((config) => {
  const token = useAuthStore.getState().accessToken;
  if (token) {
    config.headers["Authorization"] = `Bearer ${token}`;
  }
  return config;
});

axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const res = await axiosInstance.post("/v1/auth/refresh", {}, { withCredentials: true });
        useAuthStore.getState().setAccessToken(res.data.accessToken);
        originalRequest.headers["Authorization"] = `Bearer ${res.data.accessToken}`;
        return axiosInstance(originalRequest);
      } catch (err) {
        console.error("Refresh token failed, logging out", err);
        useAuthStore.getState().logout();
      }
    }
    return Promise.reject(error);
  }
);
