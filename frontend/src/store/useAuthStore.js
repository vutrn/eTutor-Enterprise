// Generated by Copilot
import { create } from "zustand";
import toast from "react-hot-toast";
import axiosInstance from "../libs/axios";
import { persist } from "zustand/middleware";

export const useAuthStore = create(
  persist(
    (set, get) => ({
      authUser: null,
      // accessToken: null,
      isSigningUp: false,
      isLoggingIn: false,
      isCheckingAuth: true,

      checkAuth: async () => {
        const token = get().accessToken;
        if (!token) {
          set({ isCheckingAuth: false });
          return;
        }

        try {
          const res = await axiosInstance.get("/auth/check", {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });
          set({ authUser: res.data });
          localStorage.setItem("authUser", JSON.stringify(res.data));
        } catch (error) {
          console.log("Error in user checkAuth:", error.message);
          set({ authUser: null });
          localStorage.removeItem("authUser");
          localStorage.removeItem("accessToken");
        } finally {
          set({ isCheckingAuth: false });
        }
      },

      signup: async (formData) => {
        set({ isSigningUp: true });
        try {
          const res = await axiosInstance.post("v1/auth/register", formData);
          set({ authUser: res.data });
          toast.success("Signup successful");
        } catch (error) {
          console.error("Signup failed:", error.response.data.message);
          toast.error(error.response.data.message);
        } finally {
          set({ isSigningUp: false });
        }
      },

      login: async (formData) => {
        set({ isLoggingIn: true });
        try {
          const res = await axiosInstance.post("/v1/auth/login", formData);
          set({ authUser: res.data });
          toast.success("Login successful");
        } catch (error) {
          console.error("Login error:", error.response?.data?.message);
          toast.error(error.response?.data?.message);
        } finally {
          set({ isLoggingIn: false });
        }
      },

      logout: async () => {
        try {
          await axiosInstance.post("v1/auth/logout");
          // Clear localStorage
          localStorage.removeItem("authUser");
          set({authUser: null});
          toast.success("Logged out successfully.");
        } catch (error) {
          console.log(error.response?.data?.message);
        }
      },

      updateProfile: async (formData) => {},

      connectSocket: async () => {},

      disconnectSocket: async () => {},
    }),
    {
      name: "auth-storage", // name of the item in the storage (must be unique)
      partialize: (state) => ({ authUser: state.authUser }),
    }
  )
);
